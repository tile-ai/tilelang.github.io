tilelang.jit.adapter.ctypes.adapter
===================================

.. py:module:: tilelang.jit.adapter.ctypes.adapter

.. autoapi-nested-parse::

   The profiler and convert to torch utils



Classes
-------

.. autoapisummary::

   tilelang.jit.adapter.ctypes.adapter.CtypesKernelAdapter


Module Contents
---------------

.. py:class:: CtypesKernelAdapter(params, result_idx, target, func_or_mod, host_mod = None, device_mod = None, kernel_global_source = None, verbose = False, pass_configs = None, compile_flags = None)

   Bases: :py:obj:`tilelang.jit.adapter.base.BaseKernelAdapter`


   Adapter class that converts TVM/TIR functions to callable CUDA kernels using ctypes.

   This adapter handles:
   1. Converting TIR functions to compiled CUDA libraries
   2. Managing dynamic shapes in tensor operations
   3. Wrapping C++ kernels for Python/PyTorch usage


   .. py:attribute:: target
      :value: 'cuda'



   .. py:attribute:: ir_module
      :type:  tilelang.tvm.IRModule | None
      :value: None



   .. py:attribute:: kernel_global_source
      :type:  str | None
      :value: None



   .. py:attribute:: lib
      :type:  ctypes.CDLL | None
      :value: None



   .. py:attribute:: wrapped_source
      :type:  str | None
      :value: None



   .. py:attribute:: dynamic_symbolic_map
      :type:  dict[tvm.tir.Var, tuple[int, int]] | None
      :value: None



   .. py:attribute:: pass_configs
      :type:  dict[str, Any] | None
      :value: None



   .. py:attribute:: param_dtypes
      :type:  list[torch.dtype] | None
      :value: None



   .. py:attribute:: param_shapes
      :type:  list[list] | None
      :value: None



   .. py:attribute:: params


   .. py:attribute:: result_idx


   .. py:attribute:: verbose
      :value: False



   .. py:attribute:: wrapper


   .. py:attribute:: lib_generator


   .. py:method:: from_database(params, result_idx, target, func_or_mod, kernel_global_source, kernel_lib_path, verbose = False, pass_configs = None, compile_flags = None)
      :classmethod:



   .. py:property:: prim_func
      :type: tvm.tir.PrimFunc


      Returns the primary TIR function from the IR module.


   .. py:property:: srcpath

      Returns the source path of the compiled library.


   .. py:property:: libpath

      Returns the path to the compiled library.


   .. py:property:: lib_code

      Returns the code of the compiled library.


   .. py:property:: is_dynamic

      Indicates whether the kernel handles dynamic shapes.


   .. py:method:: get_kernel_source(kernel_only = False)

      Returns the source code of the compiled kernel.



