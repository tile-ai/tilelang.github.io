tilelang.language.proxy
=======================

.. py:module:: tilelang.language.proxy

.. autoapi-nested-parse::

   The language interface for tl programs.



Attributes
----------

.. autoapisummary::

   tilelang.language.proxy.Buffer


Classes
-------

.. autoapisummary::

   tilelang.language.proxy.BufferProxy
   tilelang.language.proxy.BaseTensorProxy
   tilelang.language.proxy.TensorProxy
   tilelang.language.proxy.StridedTensorProxy
   tilelang.language.proxy.FragmentBufferProxy
   tilelang.language.proxy.SharedBufferProxy
   tilelang.language.proxy.LocalBufferProxy
   tilelang.language.proxy.BaseTensor


Functions
---------

.. autoapisummary::

   tilelang.language.proxy.ptr
   tilelang.language.proxy.make_tensor


Module Contents
---------------

.. py:class:: BufferProxy

   Buffer proxy class for constructing tir buffer.


   .. py:method:: __call__(shape, dtype='float32', data=None, strides=None, elem_offset=None, scope='global', align=0, offset_factor=0, buffer_type='', axis_separators=None)


   .. py:method:: __getitem__(keys)


   .. py:method:: from_ptr(pointer_var, shape, dtype = 'float32', strides = None)

      Create a buffer from a pointer, shape, and data type.

      :param pointer_var: The pointer variable
      :param shape: The shape of the buffer
      :param dtype: The data type of the buffer (default: float32)

      :returns: A buffer created from the given parameters



.. py:class:: BaseTensorProxy

   Base proxy class for tensor types with configurable defaults.

   This class serves as a foundation for different tensor proxy types, providing
   customizable default values for scope, alignment, and offset factors. It implements
   the core functionality for creating TIR buffers with specific memory configurations.


   .. py:attribute:: default_scope
      :value: 'global'



   .. py:attribute:: default_align
      :value: 0



   .. py:attribute:: default_offset_factor
      :value: 0



   .. py:method:: __call__(shape, dtype='float32', data=None, strides=None, elem_offset=None, scope=None, align=None, offset_factor=None, buffer_type='', axis_separators=None)


   .. py:method:: __getitem__(keys)


   .. py:method:: from_ptr(pointer_var, shape, dtype = 'float32', strides = None)

      Create a buffer from a pointer, shape, and data type.

      :param pointer_var: The pointer variable
      :param shape: The shape of the buffer
      :param dtype: The data type of the buffer (default: float32)

      :returns: A buffer created from the given parameters



.. py:class:: TensorProxy

   Bases: :py:obj:`BaseTensorProxy`


   Main tensor proxy class for global scope buffers.

   This class implements the default tensor proxy with global memory scope,
   the tensor should be by default contiguous.


   .. py:method:: __call__(shape, dtype = 'float32', data=None)


.. py:class:: StridedTensorProxy

   Bases: :py:obj:`BaseTensorProxy`


   Main tensor proxy class for global scope buffers, with strides supported.

   This class implements the default tensor proxy with global memory scope, with the stride information required.


   .. py:method:: __call__(shape, strides, dtype = 'float32')


.. py:class:: FragmentBufferProxy

   Bases: :py:obj:`BaseTensorProxy`


   Proxy class for fragment memory buffers.

   This class represents tensor proxies specifically for local fragment memory,
   typically used in GPU tensor core operations.


   .. py:attribute:: default_scope
      :value: 'local.fragment'



.. py:class:: SharedBufferProxy

   Bases: :py:obj:`BaseTensorProxy`


   Proxy class for shared memory buffers.

   This class represents tensor proxies for dynamic shared memory,
   commonly used in GPU shared memory operations.


   .. py:attribute:: default_scope
      :value: 'shared.dyn'



.. py:class:: LocalBufferProxy

   Bases: :py:obj:`BaseTensorProxy`


   Proxy class for local memory buffers.

   This class represents tensor proxies for local memory scope,
   typically used for temporary computations in GPU kernels.


   .. py:attribute:: default_scope
      :value: 'local'



.. py:data:: Buffer

.. py:class:: BaseTensor(shape, dtype='float32', data=None, strides=None, elem_offset=None, scope=None, align=None, offset_factor=None, buffer_type='', axis_separators=None)

   .. py:method:: __class_getitem__(key)
      :classmethod:



   .. py:method:: __getitem__(key)


   .. py:method:: __setitem__(key, value)


   .. py:method:: from_ptr(pointer_var, shape, dtype = 'float32', strides = None)
      :classmethod:



.. py:function:: ptr(dtype = None, storage_scope = 'global', *, is_size_var = False)

   Create a TIR var that represents a pointer.

   :param dtype: The data type of the pointer.
   :type dtype: str
   :param storage_scope: The storage scope of the pointer.
   :type storage_scope: str
   :param is_size_var: Whether or not to return a SizeVar instead of Var.
   :type is_size_var: bool

   :returns: **res** -- The new tir.Var with type handle or casted expression with type handle.
   :rtype: PrimExpr


.. py:function:: make_tensor(ptr, shape, dtype = 'float32', strides = None)

