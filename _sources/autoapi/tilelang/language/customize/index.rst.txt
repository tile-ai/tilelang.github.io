tilelang.language.customize
===========================

.. py:module:: tilelang.language.customize

.. autoapi-nested-parse::

   The language interface for tl programs.



Functions
---------

.. autoapisummary::

   tilelang.language.customize.region
   tilelang.language.customize.buffer_to_tile_region
   tilelang.language.customize.buffer_load_to_tile_region
   tilelang.language.customize.buffer_region_to_tile_region
   tilelang.language.customize.atomic_max
   tilelang.language.customize.atomic_min
   tilelang.language.customize.atomic_add
   tilelang.language.customize.atomic_addx2
   tilelang.language.customize.atomic_addx4
   tilelang.language.customize.dp4a
   tilelang.language.customize.clamp
   tilelang.language.customize.reshape
   tilelang.language.customize.view
   tilelang.language.customize.atomic_load
   tilelang.language.customize.atomic_store


Module Contents
---------------

.. py:function:: region(buffer, access_type, *args)

   Create a memory region descriptor for tile operations.

   :param buffer: The buffer to create a region for
   :type buffer: tir.BufferLoad
   :param access_type: Type of access - 'r' for read, 'w' for write, 'rw' for read-write
   :type access_type: str
   :param \*args: Extent expressions defining the region size
   :type \*args: tir.PrimExpr

   :returns: A region descriptor for tile operations
   :rtype: tir.Call


.. py:function:: buffer_to_tile_region(buffer, access_type)

   Convert a TVM buffer to a tile region descriptor.

   :param buffer: The buffer to convert
   :type buffer: tir.Buffer
   :param access_type: Type of access - 'r' for read, 'w' for write, 'rw' for read-write
   :type access_type: str

   :returns: A region descriptor covering the entire buffer
   :rtype: tir.Call


.. py:function:: buffer_load_to_tile_region(load, access_type, extents)

   Convert a buffer load operation to a tile region descriptor.

   :param load: The buffer load operation
   :type load: tir.BufferLoad
   :param access_type: Type of access - 'r' for read, 'w' for write, 'rw' for read-write
   :type access_type: str
   :param extents: List of expressions defining the region size
   :type extents: List[tir.PrimExpr]

   :returns: A region descriptor for the loaded area
   :rtype: tir.Call


.. py:function:: buffer_region_to_tile_region(buffer_region, access_type, extents)

   Convert a buffer region to a tile region descriptor.

   :param buffer_region: The buffer region to convert
   :type buffer_region: tir.BufferRegion
   :param access_type: Type of access - 'r' for read, 'w' for write, 'rw' for read-write
   :type access_type: str

   :returns: A region descriptor for the specified buffer region
   :rtype: tir.Call


.. py:function:: atomic_max(dst, value, memory_order = None)

   Perform an atomic maximum operation.

   :param dst: Destination buffer where the atomic maximum will be performed
   :type dst: Buffer
   :param value: Value to be atomically added
   :type value: PrimExpr

   :returns: Handle to the atomic maximum operation
   :rtype: PrimExpr


.. py:function:: atomic_min(dst, value, memory_order = None)

   Perform an atomic minimum operation.

   :param dst: Destination buffer where the atomic minimum will be performed
   :type dst: Buffer
   :param value: Value to be atomically added
   :type value: PrimExpr

   :returns: Handle to the atomic minimum operation
   :rtype: PrimExpr


.. py:function:: atomic_add(dst, value, memory_order = None)

   Perform an atomic addition operation.

   :param dst: Destination buffer where the atomic addition will be performed
   :type dst: Buffer
   :param value: Value to be atomically added
   :type value: PrimExpr

   :returns: Handle to the atomic addition operation
   :rtype: PrimExpr


.. py:function:: atomic_addx2(dst, value)

   Perform an atomic addition operation with double-width operands.

   :param dst: Destination buffer where the atomic addition will be performed
   :type dst: Buffer
   :param value: Value to be atomically added (double-width)
   :type value: PrimExpr

   :returns: Handle to the double-width atomic addition operation
   :rtype: PrimExpr


.. py:function:: atomic_addx4(dst, value)

   Perform an atomic addition operation with quad-width operands.

   :param dst: Destination buffer where the atomic addition will be performed
   :type dst: Buffer
   :param value: Value to be atomically added (quad-width)
   :type value: PrimExpr

   :returns: Handle to the quad-width atomic addition operation
   :rtype: PrimExpr


.. py:function:: dp4a(A, B, C)

   Perform a 4-element dot product with accumulation (DP4A).

   :param A: First input buffer
   :type A: Buffer
   :param B: Second input buffer
   :type B: Buffer
   :param C: Accumulation buffer
   :type C: Buffer

   :returns: Handle to the DP4A operation
   :rtype: PrimExpr


.. py:function:: clamp(dst, min_val, max_val)

   Clamps the input value dst between [min_val, max_val]

   :param dst: Input value to be clamped
   :param min_val: Minimum value
   :param max_val: Maximum value

   :returns: Value clamped to the specified range


.. py:function:: reshape(src, shape)

   Reshapes the input buffer to the specified shape.

   :param src: Input buffer to be reshaped
   :type src: Buffer
   :param shape: New shape for the buffer
   :type shape: List[PrimExpr]

   :returns: A new buffer view with the specified shape
   :rtype: Buffer


.. py:function:: view(src, shape = None, dtype = None)

   Views the input buffer with optionally modified shape and dtype.

   :param src: Input buffer to be viewed
   :type src: Buffer
   :param shape: New shape for the buffer. Defaults to None.
   :type shape: Union[List[PrimExpr], None], optional
   :param dtype: New dtype for the buffer. Defaults to None.
   :type dtype: Union[str, None], optional

   :returns: A new buffer view with the specified shape and dtype
   :rtype: Buffer


.. py:function:: atomic_load(src, memory_order = 'seq_cst')

   Loads a value from the input buffer with specified memory_order.

   :param src: Input buffer to load from
   :type src: Buffer
   :param memory_order: Atomicity level for the load operation. Defaults to "seq_cst".
   :type memory_order: str, optional

   :returns: The loaded value from the buffer
   :rtype: PrimExpr


.. py:function:: atomic_store(dst, src, memory_order = 'seq_cst')

   Stores a value to the input buffer with specified memory_order.

   :param dst: Input buffer to store to
   :type dst: Buffer
   :param src: Value to store
   :type src: PrimExpr
   :param memory_order: Atomicity level for the load operation. Defaults to "seq_cst".
   :type memory_order: str, optional

   :returns: The handle of the store operation
   :rtype: PrimExpr


