tilelang.language.customize
===========================

.. py:module:: tilelang.language.customize

.. autoapi-nested-parse::

   The language interface for tl programs.



Functions
---------

.. autoapisummary::

   tilelang.language.customize.region
   tilelang.language.customize.buffer_to_tile_region
   tilelang.language.customize.buffer_load_to_tile_region
   tilelang.language.customize.buffer_region_to_tile_region
   tilelang.language.customize.dp4a
   tilelang.language.customize.clamp
   tilelang.language.customize.reshape
   tilelang.language.customize.view
   tilelang.language.customize.loop_break


Module Contents
---------------

.. py:function:: region(buffer, access_type, *args)

   Create a tile memory-region descriptor for a BufferLoad.

   Maps access_type ('r', 'w', 'rw') to the numeric codes expected by the `tl.region` intrinsic
   (1, 2, 3 respectively) and returns a tir.Call representing the region with the provided extents.

   :param buffer: The BufferLoad that identifies the underlying buffer and indices.
   :type buffer: tir.BufferLoad
   :param access_type: One of 'r', 'w', or 'rw' indicating read, write, or read-write access.
   :type access_type: str
   :param \*args: Extent expressions for each region dimension.
   :type \*args: tir.PrimExpr

   :returns: A call to the `tl.region` intrinsic describing the memory region.
   :rtype: tir.Call

   :raises KeyError: If access_type is not one of 'r', 'w', or 'rw'.


.. py:function:: buffer_to_tile_region(buffer, access_type)

   Convert a TVM buffer to a tile region descriptor.

   :param buffer: The buffer to convert
   :type buffer: tir.Buffer
   :param access_type: Type of access - 'r' for read, 'w' for write, 'rw' for read-write
   :type access_type: str

   :returns: A region descriptor covering the entire buffer
   :rtype: tir.Call


.. py:function:: buffer_load_to_tile_region(load, access_type, extents)

   Convert a buffer load operation to a tile region descriptor.

   :param load: The buffer load operation
   :type load: tir.BufferLoad
   :param access_type: Type of access - 'r' for read, 'w' for write, 'rw' for read-write
   :type access_type: str
   :param extents: List of expressions defining the region size
   :type extents: List[tir.PrimExpr]

   :returns: A region descriptor for the loaded area
   :rtype: tir.Call


.. py:function:: buffer_region_to_tile_region(buffer_region, access_type, extents)

   Create a tl region descriptor for the given BufferRegion.

   :param buffer_region: Source buffer region whose `region` items provide mins and extents.
   :type buffer_region: tir.BufferRegion
   :param access_type: Access mode: "r", "w", or "rw".
   :type access_type: str
   :param extents: Requested extents; must have length <= the number of extents in buffer_region.region.
   :type extents: List[PrimExpr]

   :returns: A tile-region descriptor (tl.region) covering the buffer_region.
   :rtype: tir.Call

   :raises AssertionError: If the number of extents in buffer_region.region is smaller than len(extents).


.. py:function:: dp4a(A, B, C)

   Perform a 4-element dot product with accumulation (DP4A).

   :param A: First input buffer
   :type A: Buffer
   :param B: Second input buffer
   :type B: Buffer
   :param C: Accumulation buffer
   :type C: Buffer

   :returns: Handle to the DP4A operation
   :rtype: PrimExpr


.. py:function:: clamp(dst, min_val, max_val)

   Clamps the input value dst between [min_val, max_val]

   :param dst: Input value to be clamped
   :param min_val: Minimum value
   :param max_val: Maximum value

   :returns: Value clamped to the specified range


.. py:function:: reshape(src, shape)

   Reshapes the input buffer to the specified shape.

   :param src: Input buffer to be reshaped
   :type src: Buffer
   :param shape: New shape for the buffer
   :type shape: List[PrimExpr]

   :returns: A new buffer view with the specified shape
   :rtype: Buffer


.. py:function:: view(src, shape = None, dtype = None)

   Return a Tensor view of the input buffer with an optional new shape and dtype.

   If `shape` is None the source buffer's shape is used; if `dtype` is None the source buffer's dtype is used. The returned buffer shares the same underlying data as `src` (no copy).


.. py:function:: loop_break()

   Break out of the current loop.

   :returns: A call to the `tl.loop_break` intrinsic.
   :rtype: tir.Call


